package ARm8.eze.modules.exploits;

import java.io.*;
import java.net.*;

import ARm8.eze.Addon;
import meteordevelopment.meteorclient.events.packets.PacketEvent;
import meteordevelopment.meteorclient.settings.BoolSetting;
import meteordevelopment.meteorclient.settings.Setting;
import meteordevelopment.meteorclient.settings.SettingGroup;
import meteordevelopment.meteorclient.settings.StringSetting;
import meteordevelopment.meteorclient.systems.modules.Module;
import meteordevelopment.orbit.EventHandler;
import net.minecraft.network.packet.c2s.login.LoginHelloC2SPacket;
import net.minecraft.network.packet.c2s.login.LoginKeyC2SPacket;

public class ProxyBypass extends Module {
    public final SettingGroup sgGeneral = settings.getDefaultGroup();
    private final SettingGroup sgCredentials = settings.createGroup("Credentials");

    private final Setting<String> host = sgGeneral.add(new StringSetting.Builder()
        .name("proxy-host")
        .description("The proxy-host to connect to.")
        .defaultValue("157.90.56.39")
        .build()
    );

    private final Setting<Boolean> autoDisable = sgGeneral.add(new BoolSetting.Builder()
        .name("auto-disable")
        .description("Disables module on join.")
        .defaultValue(true)
        .build());

    private final Setting<String> username = sgCredentials.add(new StringSetting.Builder()
        .name("username")
        .description("Username of the account that will join the proxy.")
        .defaultValue("eze")
        .build()
    );

    private final Setting<String> password = sgCredentials.add(new StringSetting.Builder()
        .name("password")
        .description("Password of the account that will join the proxy.")
        .defaultValue("password")
        .build()
    );

    public ProxyBypass() {
        super(Addon.EXPLOITS, "proxy-bypass", "Bypasses proxies");
    }

    private Socket socket;

    @Override
    public void onActivate() {
        if (mc.player == null) {
            toggle();
            return;
        }

        if (autoDisable.get()) toggle();
    }

    public void onDeactivate() {
        if (socket != null) {
            try {
                socket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    
    @EventHandler
    private void onReceivePacket(PacketEvent.Receive event) {
        if (event.packet instanceof LoginHelloC2SPacket packet) {
            info("LoginHelloC2SPacket: [" + packet + "]");
        }

        if (event.packet instanceof LoginKeyC2SPacket packet) {
            info("LoginKeyC2SPacket: [" + packet + "]");
        }
    }
}
